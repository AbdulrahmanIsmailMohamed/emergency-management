<%- include('../partials/header') -%> <%- include('../partials/navbar') -%>

<div id="container">
  <!-- the map will go inside this div below -->
  <div id="map"></div>
</div>

<script>
  const geoserverUrl = "http://localhost:8080/geoserver";
  let selectedPoint = null,
    source = null,
    target = null;

  // empty geojson layer for the shortest path result
  let pathLayer = L.geoJSON(null);

  // initialize our map
  var map = L.map("map", {
    center: [30.5904, 31.50673], // center map to jkuat
    zoom: 13, // set the zoom level
  });

  // add openstreet baselayer to the map
  var OpenStreetMap = L.tileLayer(
    "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
    {
      maxZoom: 19,
      attribution:
        '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
    }
  ).addTo(map);

  // display zag points
  const fetchJSON = async (url) => {
    try {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      const data = await response.json();
      initItems(data);
    } catch (error) {
      console.error("Error fetching JSON:", error);
    }
  };

  const initItems = (zag) => {
    const iconMappings = {
      hospital: L.icon({
        iconUrl: "/hospital-location-pin.png",
        iconSize: [38, 40],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
      }),
      police: L.icon({
        iconUrl: "/police.png",
        iconSize: [38, 35],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
      }),
      ambulance: L.icon({
        iconUrl: "/ambulance.png",
        iconSize: [38, 35],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
      }),
      fire: L.icon({
        iconUrl: "/fire-station.png",
        iconSize: [40, 35],
        iconAnchor: [22, 94],
        popupAnchor: [-3, -76],
      }),
    };

    zag.features.forEach((item) => {
      const icon =
        iconMappings[item.properties.type.toLowerCase()] || iconMappings.fire;

      const marker = L.marker(
        [item.geometry.coordinates[1], item.geometry.coordinates[0]],
        { icon }
      )
        .bindPopup(
          createPopupContent(
            [
              `Type: ${item.properties.type}`,
              `Name: ${item.properties.name}`,
              `Address: ${item.properties.address}`,
            ],
            item.properties.photo.replace("\\", "/")
          )
        )
        .addTo(map);
    });
  };

  fetchJSON("../data/zag.json");

  const sourceMarker = L.marker([30.5904, 31.50673], { draggable: true })
    .on("dragend", (e) => {
      selectedPoint = e.target.getLatLng();
      getVertex(selectedPoint);
      getRoute();
    })
    .addTo(map);

  const targetMarker = L.marker([30.5904, 31.50673], { draggable: true })
    .on("dragend", (e) => {
      selectedPoint = e.target.getLatLng();
      getVertex(selectedPoint);
      getRoute();
    })
    .addTo(map);

  // Function to create popup content
  function createPopupContent(properties, pathPhoto) {
    let popupContent = "<table>";

    for (let key in properties) {
      if (properties.hasOwnProperty(key)) {
        popupContent += `<tr><td>${properties[key]}</td></tr>`;
      }
    }

    if (pathPhoto) {
      popupContent += `
      <tr>
        <td style="text-align: center;">
          <img src="${pathPhoto}" alt="photo" weidth="250px" style="max-width: 250px; max-height: 100px;">
        </td>
      </tr>`;
    }

    popupContent += "</table>";
    return popupContent;
  }

  // function to get the shortest path from the give source and target nodes
  function getRoute() {
    let url = `${geoserverUrl}/wfs?service=WFS&version=1.0.0&request=GetFeature&typeName=emergencyManagment:shortest_path&outputformat=application/json&viewparams=source:${source};target:${target};`;

    $.getJSON(url, function (data) {
      map.removeLayer(pathLayer);
      pathLayer = L.geoJSON(data, {
        onEachFeature: function (feature, layer) {
          layer.bindPopup(createPopupContent(feature.properties)); // Bind popup with attribute data
        },
      });
      map.addLayer(pathLayer);
    });
  }

  const getVertex = (selectedPoint) => {
    const { lat, lng } = selectedPoint;
    const wmsUrl = `${geoserverUrl}/emergencyManagment/wfs?service=WFS&version=1.0.0&request=GetFeature&typeName=emergencyManagment:nearest_vertex&outputformat=application/json&viewparams=x:${lng};y:${lat};`;

    $.ajax({
      url: wmsUrl,
      async: false,
      success: (data) => {
        loadVertex(
          data,
          selectedPoint.toString() === sourceMarker.getLatLng().toString()
        );
      },
    });
  };

  // function to update the source and target nodes as returned from geoserver for later querying
  const loadVertex = (response, isSource) => {
    if (response.features) {
      let features = response.features;
      map.removeLayer(pathLayer);
      if (isSource) {
        source = features[0].properties.id;
        sourceMarker.bindPopup(
          createPopupContent([
            `latitude: ${features[0].geometry.coordinates[0]}`,
            `longitude: ${features[0].geometry.coordinates[1]}`,
          ])
        ); // Bind popup with attribute data
      } else {
        target = features[0].properties.id;
        targetMarker.bindPopup(
          createPopupContent([
            `latitude: ${features[0].geometry.coordinates[0]}`,
            `longitude: ${features[0].geometry.coordinates[1]}`,
          ])
        ); // Bind popup with attribute data
      }
    } else {
      console.error("Response does not contain features array.");
    }
  };

  // Function to handle click events on pathLayer
  pathLayer.on("click", function (event) {
    event.layer.openPopup();
  });

  // Create a custom control element to get my location
  var customControl = L.Control.extend({
    options: {
      position: "topleft",
    },

    onAdd: (map) => {
      // Create a button element
      let button = L.DomUtil.create(
        "button",
        "leaflet-bar leaflet-control leaflet-control-custom"
      );
      button.innerHTML = "Get My Location";
      button.style.backgroundColor = "gray";
      button.style.color = "white";
      button.style.padding = "10px";
      button.style.borderRadius = "10px";

      // Handle button click event
      button.onclick = () => {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            function (position) {
              const userLocation = [
                position.coords.latitude,
                position.coords.longitude,
              ];
              map.flyTo(userLocation, 18); // Smoothly pan and zoom to the user's location
              L.marker(userLocation).addTo(map); // Add marker at user's location
            },
            (error) => {
              console.error("Error getting user location:", error);
            }
          );
        } else {
          alert("Geolocation is not supported by your browser.");
        }
      };

      return button; // Add the button element to the map
    },
  });

  // Add the custom control to the map
  map.addControl(new customControl());

  getVertex(sourceMarker.getLatLng());
  getVertex(targetMarker.getLatLng());
  getRoute();
</script>
<%- include('../partials/footer') -%>
